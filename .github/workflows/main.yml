name: Deploy MkDocs to S3 + CloudFront

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-mkdocs
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-2
      SITE_DOMAIN: www.k8s.guide
      SITE_BUCKET: k8s-guide-site
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install MkDocs
        run: |
          python -m pip install --upgrade pip
          # use requirements.txt if present, else install libs directly
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install mkdocs mkdocs-material; fi

      - name: Build site
        run: mkdocs build --clean

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to S3
        run: |
          aws s3 sync site/ "s3://${SITE_BUCKET}/" \
            --delete \
            --cache-control max-age=31536000,public \
            --exclude index.html --exclude 404.html
          aws s3 cp site/index.html "s3://${SITE_BUCKET}/index.html" \
            --cache-control max-age=60,public --content-type text/html
          if [ -f site/404.html ]; then
            aws s3 cp site/404.html "s3://${SITE_BUCKET}/404.html" \
              --cache-control max-age=60,public --content-type text/html
          fi

      - name: Resolve CloudFront distribution by alias
        id: cf
        run: |
          DIST_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Aliases.Items && contains(Aliases.Items, '${{ env.SITE_DOMAIN }}')].Id | [0]" \
            --output text)
          if [ -z "$DIST_ID" ] || [ "$DIST_ID" = "None" ]; then
            echo "Could not find CloudFront distribution for ${{ env.SITE_DOMAIN }}"; exit 1
          fi
          echo "DIST_ID=$DIST_ID" >> "$GITHUB_OUTPUT"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${{ steps.cf.outputs.DIST_ID }}" \
            --paths "/index.html" "/404.html"
